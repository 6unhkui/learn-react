{"version":3,"sources":["components/common/Header.js","components/PostWrapper.js","components/Navigator.js","components/Post.js","components/Comment.js","components/CommentList.js","pages/PostPage.js","App.js","serviceWorker.js","stores/PostStore.js","index.js"],"names":["Header","react_default","a","createElement","className","PostWrapper","_ref","children","Navigate","postId","onClick","Button","color","content","icon","labelPosition","Post","body","title","src_components_CommentList","Comment","name","inject","_ref2","comments","store","observer","commentList","map","comment","index","src_components_Comment","key","console","log","PostPage","handleNavigateClick","type","_this","props","setPostId","_renderPost","posts","post","src_components_Post","this","getList","_this$props$store","isLoading","src_components_PostWrapper","Navigator","Component","App","Fragment","components_common_Header","pages_PostPage","process","Boolean","window","location","hostname","match","types","model","userId","number","id","identifierNumber","string","email","optional","array","actions","self","doneLoading","loading","setPost","data","num","setCommentsList","axios","get","concat","then","response","catch","err","create","ReactDOM","render","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.444b9647.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n    <div className=\"Header\">\r\n       POSTS\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './PostWrapper.css'\r\n\r\nconst PostWrapper = ({children}) => (\r\n    <div className=\"PostWrapper\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\n\r\nexport default PostWrapper;","import React from 'react';\r\nimport { Button } from 'semantic-ui-react'\r\nimport './Navigate.css'\r\n\r\nconst Navigate = ({ postId, onClick }) => (\r\n    <div className=\"Navigate\">\r\n         <Button\r\n            color='teal'\r\n            content=\"Previous\"\r\n            icon=\"left arrow\"\r\n            labelPosition=\"left\"\r\n            onClick={\r\n                () => onClick('PREV')\r\n            }\r\n        />\r\n        <div className=\"Navigate-page-num\">\r\n            {postId}\r\n        </div>\r\n        <Button\r\n            color=\"teal\"\r\n            content=\"Next\"\r\n            icon=\"right arrow\"\r\n            labelPosition=\"right\"\r\n            className=\"Navigate-right-button\"\r\n            onClick={\r\n                () => onClick('NEXT')\r\n            }\r\n        /> \r\n    </div>\r\n);\r\n\r\nexport default Navigate;","import React from 'react';\r\nimport './Post.css';\r\nimport {CommentList} from './';\r\n\r\nconst Post = ({ body, title }) => {\r\n    return (\r\n    <div className=\"Post\">\r\n        <h1>{title}</h1>\r\n        <p>\r\n        {body}\r\n        </p>\r\n        <CommentList/>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({name, body}) => {\r\n    return (\r\n        <li className=\"Comment\">\r\n            <p>\r\n                <b>{name}</b> {body}\r\n            </p>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Comment;","import React from 'react';\r\nimport { observer,inject } from 'mobx-react';\r\nimport Comment from './Comment';\r\nimport './CommentList.css';\r\n\r\nconst CommentList = ({comments}) => {\r\n    const commentList = comments.map((comment, index) => (\r\n        <Comment\r\n           key={index}\r\n           name = {comment.name}\r\n           body = {comment.body} \r\n        />\r\n      ));\r\n\r\n    return (\r\n        <ul className=\"CommentList\">\r\n           {console.log('CommentList render')}\r\n           {commentList}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default inject(({store}) => ({\r\n    comments: store.comments\r\n  }))(observer(CommentList));","import React, { Component } from 'react';\r\nimport { PostWrapper, Navigator, Post } from '../components';\r\nimport { observer,inject } from 'mobx-react';\r\n\r\n@inject('store')\r\n@observer\r\nclass PostPage extends Component {\r\n    \r\n    componentDidMount() {\r\n        console.log('componentDidMount-----------');\r\n        this.props.store.getList();\r\n    }\r\n\r\n    handleNavigateClick = (type) => {\r\n        const {postId} = this.props.store;\r\n\r\n        if(type === 'NEXT') {\r\n            this.props.store.setPostId(postId+1);\r\n        } else {\r\n            if(postId > 1) this.props.store.setPostId(postId-1);\r\n        }\r\n    }\r\n\r\n    _renderPost = () => { \r\n        console.log(' _renderPost-----------');\r\n \r\n        const posts = this.props.store.posts.map((post, index) => {\r\n            return <Post body={post.body} title = {post.title} key={index}/>\r\n        })\r\n     \r\n        return posts;\r\n    } \r\n\r\n    render() {\r\n        const {isLoading, postId} = this.props.store;\r\n\r\n        return (\r\n            <div>\r\n            <PostWrapper>\r\n                <Navigator postId={postId} onClick={this.handleNavigateClick} />\r\n                {isLoading? 'Loading' : this._renderPost()}\r\n            </PostWrapper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostPage;","import React, { Component } from 'react';\nimport { Header } from './components';\nimport { PostPage } from './pages';\nimport DevTools from 'mobx-react-devtools';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header/>\n        <PostPage/>\n        {process.env.NODE_ENV === 'development' && <DevTools />}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from \"mobx-state-tree\";\r\nimport axios from 'axios';\r\n\r\nconst Post = types\r\n    .model('Post', {\r\n       userId : types.number,\r\n       id : types.identifierNumber,\r\n       title : types.string,\r\n       body : types.string  \r\n    }\r\n);\r\n\r\nconst comment = types\r\n     .model('comment', {\r\n        postId : types.identifierNumber,\r\n        id : types.number,\r\n        name : types.string,\r\n        email : types.string,\r\n        body : types.string\r\n     }\r\n);\r\n\r\nconst PostStore = types\r\n    .model({\r\n       postId : types.optional(types.number, 1),\r\n       posts : types.optional(types.array(Post), []),\r\n       comments : types.optional(types.array(comment), []),\r\n       isLoading : true\r\n    })\r\n    .actions(self => ({\r\n        doneLoading(loading) { // 로딩\r\n           self.isLoading = loading;\r\n        },\r\n\r\n        setPost(data) { // 게시글 데이터 MODEL에 넣어주기\r\n          self.posts = data;\r\n        },\r\n\r\n        setPostId(num){ // postId 카운트\r\n           self.postId = num; // navigate 클릭시 count되고, count된 값을 postId에 넣어줌\r\n           self.getList(); //List 반영\r\n        },\r\n\r\n        setCommentsList(data) { // 댓글 데이터 MODEL에 넣어주기\r\n          self.comments = data;\r\n        },\r\n        \r\n        getList() { // 게시글 데이터 받기\r\n           console.log('store getListAPI');\r\n           \r\n           axios.get(`https://jsonplaceholder.typicode.com/posts?id=${self.postId}`)\r\n             .then((response) => {\r\n                self.doneLoading(false);\r\n                self.setPost(response.data);\r\n             })\r\n             .catch( err => console.log(err));\r\n\r\n           axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${self.postId}`)\r\n             .then((response) => {\r\n                self.setCommentsList(response.data);\r\n             })\r\n             .catch( err => console.log(err));\r\n        }\r\n    }));\r\n\r\n    \r\nexport default PostStore;","import 'react-app-polyfill/ie9'; // For IE 9-11 supports\nimport 'react-app-polyfill/ie11'; // For IE 11 support\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport Poststore from './stores/PostStore';\n\n/*\nimport 'babel-polyfill';\n//IE Promise Support\nimport Promise from 'promise-polyfill';\nif (!window.Promise) {\n  window.Promise = Promise;\n}\n*/\n\nconst store = Poststore.create();\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}